// Generated by CoffeeScript 1.8.0
var AllSiteSearch, AllSiteSearchClass, TinySegmenter, cheerio, lunr;

if (typeof require !== "undefined" && require !== null) {
  lunr = require('lunr');
  TinySegmenter = require('./tiny_segmenter-node');
  cheerio = require('cheerio');
}

AllSiteSearchClass = (function() {
  function AllSiteSearchClass(lunr) {
    var tokenizer;
    this.lunr = lunr;
    this.segmenter = new TinySegmenter();
    tokenizer = (function(_this) {
      return function(obj) {
        var str;
        if (obj == null) {
          return [];
        }
        if (Array.isArray(obj)) {
          return obj.map(function(t) {
            return t.toLowerCase();
          });
        }
        str = obj.toString().toLowerCase().replace(/^\s+/, '');
        return _this.segmenter.segment(str);
      };
    })(this);
    this.lunr.tokenizer = tokenizer;
    this.lunr.stopWordFilter.stopWords.add.apply(lunr.stopWordFilter.stopWords, ['。', '、', 'です', 'ます']);
    this.sections = [];
  }

  AllSiteSearchClass.prototype._init_index = function() {
    return this.index = this.lunr(function() {
      this.field('title');
      this.field('contents');
      return this.pipeline.remove(lunr.trimmer);
    });
  };

  AllSiteSearchClass.prototype._build_sections_dict = function() {
    var section, _i, _len, _ref, _results;
    this.sections_dict = {};
    _ref = this.sections;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      section = _ref[_i];
      _results.push(this.sections_dict[section.id] = section);
    }
    return _results;
  };

  AllSiteSearchClass.prototype.load = function(_arg) {
    var index, sections;
    index = _arg.index, sections = _arg.sections;
    this.index = this.lunr.Index.load(index);
    this.sections = sections;
    return this._build_sections_dict();
  };

  AllSiteSearchClass.prototype.serialize = function() {
    return {
      index: this.index.toJSON(),
      sections: this.sections
    };
  };

  AllSiteSearchClass.prototype.add_html = function(file, html, selector, use_fake_id) {
    var $, contents, current_section, current_whole, head_index, page_title, section, sections, _i, _len;
    if (use_fake_id == null) {
      use_fake_id = false;
    }
    $ = cheerio.load(html);
    contents = $(selector).contents();
    page_title = $('title').text();
    sections = [];
    current_whole = {
      id: file,
      title: page_title,
      contents: ''
    };
    sections.push(current_whole);
    current_section = {
      id: "" + file + "#",
      title: '',
      contents: ''
    };
    sections.push(current_section);
    head_index = 0;
    contents.each(function() {
      var elem, id, text, title;
      elem = $(this);
      if (elem.is('h1, h2, h3, h4, h5, h6') && (use_fake_id || (elem.attr('id') == null))) {
        id = elem.attr('id');
        if (id == null) {
          head_index++;
          id = "head" + head_index;
        }
        title = elem.text();
        current_section = {
          id: "" + file + "#" + id,
          title: "" + page_title + "#" + title,
          contents: ''
        };
        current_whole.contents += title;
        return sections.push(current_section);
      } else {
        text = elem.text();
        current_whole.contents += text;
        return current_section.contents += text;
      }
    });
    if (this.index == null) {
      this._init_index();
    }
    for (_i = 0, _len = sections.length; _i < _len; _i++) {
      section = sections[_i];
      this.index.add(section);
    }
    this.sections = this.sections.concat(sections);
    return this._build_sections_dict();
  };

  AllSiteSearchClass.prototype.search = function(query_elements) {
    var id, item, matched, query_element, result, results, _i, _j, _len, _len1;
    matched = {};
    for (_i = 0, _len = query_elements.length; _i < _len; _i++) {
      query_element = query_elements[_i];
      result = this.index.search(query_element);
      for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
        item = result[_j];
        id = item.ref;
        if (!matched[id]) {
          matched[id] = {
            id: id,
            score: 0,
            count: 0
          };
        }
        matched[id].score += item.score;
        matched[id].count++;
      }
    }
    for (id in matched) {
      item = matched[id];
      if (item.count !== query_elements.length) {
        delete matched[id];
      }
    }
    results = [];
    for (id in matched) {
      item = matched[id];
      results.push(item);
    }
    return results.sort(function(a, b) {
      return b.score - a.score;
    });
  };

  AllSiteSearchClass.prototype.search_sections = function(query_elements) {
    var result, results, _i, _len, _results;
    results = this.search(query_elements);
    _results = [];
    for (_i = 0, _len = results.length; _i < _len; _i++) {
      result = results[_i];
      _results.push(this.sections_dict[result.id]);
    }
    return _results;
  };

  return AllSiteSearchClass;

})();

AllSiteSearch = new AllSiteSearchClass(lunr);

if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
  module.exports = AllSiteSearch;
}
