if require?
	lunr = require 'lunr'
	TinySegmenter = require './tiny_segmenter-node'
	cheerio = require 'cheerio'

class AllSiteSearchClass
	constructor: (@lunr) ->
		@segmenter = new TinySegmenter()

		tokenizer = (obj) =>
			unless obj?
				return []
			if Array.isArray(obj)
				return obj.map (t) -> t.toLowerCase()
			str = obj.toString().toLowerCase().replace(/^\s+/, '')
			@segmenter.segment str

		@lunr.tokenizer = tokenizer

		@lunr.stopWordFilter.stopWords.add.apply lunr.stopWordFilter.stopWords, ['。', '、', 'です' ,'ます']
		@sections = []
	_init_index: ->
		@index = @lunr ->
			@field 'title'
			@field 'contents'
			@pipeline.remove(lunr.trimmer)
	_build_sections_dict: ->
		@sections_dict = {}
		for section in @sections
			@sections_dict[section.id] = section
	load: ({index, sections}) ->
		@index = @lunr.Index.load index
		@sections = sections
		@_build_sections_dict()
	serialize: ->
		index: @index?.toJSON()
		sections: @sections
	add_html: (file, html, selector, use_fake_id=false) ->
		$ = cheerio.load html
		contents = $(selector).contents()
		page_title = $('title').text()
		sections = []
		current_whole = {id: file, title: page_title, contents: ''}
		sections.push current_whole
		current_section = null
		head_index = 0
		contents.each ->
			elem = $(@)
			if elem.is('h1, h2, h3, h4, h5, h6') and (use_fake_id or elem.attr('id'))
				id = elem.attr 'id'
				unless id?
					head_index++
					id = "head#{head_index}"
				title = elem.text()
				current_section = {id: "#{file}##{id}", title: "#{page_title}##{title}", contents: ''}
				current_whole.contents += title
				sections.push current_section
			else
				text = elem.text()
				current_whole.contents += text
				if current_section?
					current_section.contents += text
		unless @index?
			@_init_index()
		for section in sections
			@index.add section
		@sections = @sections.concat sections
		@_build_sections_dict()
	search: (query_elements) -> # and search
		matched = {}
		for query_element in query_elements
			result = @index.search query_element
			for item in result
				id = item.ref
				unless matched[id]
					matched[id] = {id: id, score: 0, count: 0}
				matched[id].score += item.score
				matched[id].count++
		for id, item of matched
			unless item.count == query_elements.length
				delete matched[id]
		results = []
		for id, item of matched
			results.push item
		results.sort (a, b) -> b.score - a.score
	search_sections: (query_elements) ->
		results = @search query_elements
		(@sections_dict[result.id] for result in results)

AllSiteSearch = new AllSiteSearchClass(lunr)

if module?.exports
	module.exports = AllSiteSearch
