fs = require('fs')
path = require('path')
jade = require('jade')
jsyaml = require('js-yaml')
MarkdownDeep = require('markdowndeep')
mdd = new MarkdownDeep.Markdown()
mdd.ExtraMode = true
mdd.MarkdownInHtml = true

gen_help = ->
	console.log "config = #{config_file}"
	setting = jsyaml.safeLoad fs.readFileSync config_file, 'utf8'

	console.log "index = #{setting.index}"
	index = jsyaml.safeLoad fs.readFileSync setting.index, 'utf8'

	root = null
	find_root = (elements) ->
		for element in elements
			if element.place == setting.root.place
				element.root = true
				element.root_title = setting.root.root_title
				root = element
				break
			if element.children?
				find_root element.children, element

	find_root index

	previous_element = null
	build_index = (elements, parent) ->
		for element in elements
			md_file = path.join setting.directory.src, element.place + '.md'
			html_file = path.join setting.directory.src, element.place + '.html'
			jade_file = path.join setting.directory.src, element.place + '.jade'
			if element.place? and (not setting.check_fs or fs.existsSync(md_file) or fs.existsSync(html_file) or fs.existsSync(jade_file))
				if fs.existsSync md_file
					contents_md = fs.readFileSync md_file, 'utf8'
					unless contents_md.match /<\?xml version/
						element.has_link = true
				else if fs.existsSync html_file
					contents_html = fs.readFileSync html_file, 'utf8'
					unless contents_html.match /<\?xml version/
						element.has_link = true
				else if fs.existsSync jade_file
						element.has_link = true
			if parent?
				element.parent = parent
				element.hierarchy = parent.hierarchy + 1
			else
				element.hierarchy = 0
				if not element.root
					element.parent = root
			if element.has_link
				if previous_element?
					element.previous = previous_element
					previous_element.next = element
				previous_element = element
			if element.children?
				build_index element.children, element

	build_index index

	element_template = jade.compile fs.readFileSync(setting.template.element, 'utf8'), pretty: true, filename: setting.template.element

	build_element = (elements) ->
		for element in elements
			md_file = path.join setting.directory.src, element.place + '.md'
			html_file = path.join setting.directory.src, element.place + '.html'
			jade_file = path.join setting.directory.src, element.place + '.jade'
			target_file = path.join setting.directory.target, element.place + '.html'
			if element.place? and element.has_link
				contents_html = null
				if fs.existsSync md_file
					console.log 'Markdown :', element.place
					contents_md = fs.readFileSync md_file, 'utf8'
					contents_html = mdd.Transform contents_md
				else if fs.existsSync html_file
					console.log 'HTML     :', element.place
					contents_html = fs.readFileSync html_file, 'utf8'
				else if fs.existsSync jade_file
					console.log 'Jade     :', element.place
					contents_template = jade.compile fs.readFileSync(jade_file, 'utf8'), pretty: true, filename: jade_file
					contents_html = contents_template(title: element.title)
				if contents_html?
					element_html = element_template(title: element.title, contents: contents_html, index: index, element: element)
					fs.writeFileSync target_file, element_html, 'utf8'
			if element.children?
				build_element element.children

	build_element index

command = process.argv[2]
config_file = if process.argv[3] then process.argv[3] else 'indexsite.conf'
switch command
	when 'do', 'gen_help'
		gen_help()
	when 'gen_conf'
		fs.writeFileSync config_file, '''
			index: 'index.yaml' # 目次を定義する。このファイルに定義されたplaceにあたるファイルのみ処理される。
			template:
			  element: 'templates/element.jade' # テンプレート。ドキュメントの中身であるcontents、目次のindex、自分を示すelement、タイトルを示すtitleが渡される。
			directory:
			  src: 'src' # ソース
			  target: 'dist' # ビルド後
			check_fs: true # 通常true ファイルの存在確認をし、目次のリンクに反映させる。
			root:
			  place: 'index' # パンくずリスト上でルート扱いされる項目
			  root_title: 'SSP' # パンくずリスト上でルート扱いされたときのラベル
		''', 'utf8'
		process.exit 0
	else
		console.log """
			Usage: indexsite command [/path/to/configfile]
			
			単一のフォルダにあるHTML/Jade/Markdownからテンプレートを使って目次付きHTMLを生成する。
			
			commands:
				- do
					HTMLを設定に沿って生成する
				- gen_conf
					設定ファイルを生成する : indexsite.conf
		"""
		process.exit()
