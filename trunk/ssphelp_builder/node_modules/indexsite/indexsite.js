// Generated by CoffeeScript 1.8.0
(function() {
  var MarkdownDeep, command, config_file, fs, gen_help, jade, jsyaml, mdd, path;

  fs = require('fs');

  path = require('path');

  jade = require('jade');

  jsyaml = require('js-yaml');

  MarkdownDeep = require('markdowndeep');

  mdd = new MarkdownDeep.Markdown();

  mdd.ExtraMode = true;

  mdd.MarkdownInHtml = true;

  gen_help = function() {
    var build_element, build_index, element_template, find_root, index, previous_element, root, setting;
    console.log("config = " + config_file);
    setting = jsyaml.safeLoad(fs.readFileSync(config_file, 'utf8'));
    console.log("index = " + setting.index);
    index = jsyaml.safeLoad(fs.readFileSync(setting.index, 'utf8'));
    root = null;
    find_root = function(elements) {
      var element, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        if (element.place === setting.root.place) {
          element.root = true;
          element.root_title = setting.root.root_title;
          root = element;
          break;
        }
        if (element.children != null) {
          _results.push(find_root(element.children, element));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    find_root(index);
    previous_element = null;
    build_index = function(elements, parent) {
      var contents_html, contents_md, element, html_file, jade_file, md_file, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        md_file = path.join(setting.directory.src, element.place + '.md');
        html_file = path.join(setting.directory.src, element.place + '.html');
        jade_file = path.join(setting.directory.src, element.place + '.jade');
        if ((element.place != null) && (!setting.check_fs || fs.existsSync(md_file) || fs.existsSync(html_file) || fs.existsSync(jade_file))) {
          if (fs.existsSync(md_file)) {
            contents_md = fs.readFileSync(md_file, 'utf8');
            if (!contents_md.match(/<\?xml version/)) {
              element.has_link = true;
            }
          } else if (fs.existsSync(html_file)) {
            contents_html = fs.readFileSync(html_file, 'utf8');
            if (!contents_html.match(/<\?xml version/)) {
              element.has_link = true;
            }
          } else if (fs.existsSync(jade_file)) {
            element.has_link = true;
          }
        }
        if (parent != null) {
          element.parent = parent;
        } else if (!element.root) {
          element.parent = root;
        }
        if (element.has_link) {
          if (previous_element != null) {
            element.previous = previous_element;
            previous_element.next = element;
          }
          previous_element = element;
        }
        if (element.children != null) {
          _results.push(build_index(element.children, element));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    build_index(index);
    element_template = jade.compile(fs.readFileSync(setting.template.element, 'utf8'), {
      pretty: true,
      filename: setting.template.element
    });
    build_element = function(elements) {
      var contents_html, contents_md, contents_template, element, element_html, html_file, jade_file, md_file, target_file, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        md_file = path.join(setting.directory.src, element.place + '.md');
        html_file = path.join(setting.directory.src, element.place + '.html');
        jade_file = path.join(setting.directory.src, element.place + '.jade');
        target_file = path.join(setting.directory.target, element.place + '.html');
        if ((element.place != null) && element.has_link) {
          contents_html = null;
          if (fs.existsSync(md_file)) {
            console.log('Markdown :', element.place);
            contents_md = fs.readFileSync(md_file, 'utf8');
            contents_html = mdd.Transform(contents_md);
          } else if (fs.existsSync(html_file)) {
            console.log('HTML     :', element.place);
            contents_html = fs.readFileSync(html_file, 'utf8');
          } else if (fs.existsSync(jade_file)) {
            console.log('Jade     :', element.place);
            contents_template = jade.compile(fs.readFileSync(jade_file, 'utf8'), {
              pretty: true,
              filename: jade_file
            });
            contents_html = contents_template({
              title: element.title
            });
          }
          if (contents_html != null) {
            element_html = element_template({
              title: element.title,
              contents: contents_html,
              index: index,
              element: element
            });
            fs.writeFileSync(target_file, element_html, 'utf8');
          }
        }
        if (element.children != null) {
          _results.push(build_element(element.children));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    return build_element(index);
  };

  command = process.argv[2];

  config_file = process.argv[3] ? process.argv[3] : 'indexsite.conf';

  switch (command) {
    case 'do':
    case 'gen_help':
      gen_help();
      break;
    case 'gen_conf':
      fs.writeFileSync(config_file, 'index: \'index.yaml\' # 目次を定義する。このファイルに定義されたplaceにあたるファイルのみ処理される。\ntemplate:\n  element: \'templates/element.jade\' # テンプレート。ドキュメントの中身であるcontents、目次のindex、自分を示すelement、タイトルを示すtitleが渡される。\ndirectory:\n  src: \'src\' # ソース\n  target: \'dist\' # ビルド後\ncheck_fs: true # 通常true ファイルの存在確認をし、目次のリンクに反映させる。\nroot:\n  place: \'index\' # パンくずリスト上でルート扱いされる項目\n  root_title: \'SSP\' # パンくずリスト上でルート扱いされたときのラベル', 'utf8');
      process.exit(0);
      break;
    default:
      console.log("Usage: indexsite command [/path/to/configfile]\n\n単一のフォルダにあるHTML/Jade/Markdownからテンプレートを使って目次付きHTMLを生成する。\n\ncommands:\n	- do\n		HTMLを設定に沿って生成する\n	- gen_conf\n		設定ファイルを生成する : indexsite.conf");
      process.exit();
  }

}).call(this);
