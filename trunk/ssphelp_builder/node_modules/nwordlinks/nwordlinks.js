// Generated by CoffeeScript 1.8.0
var $, argv, cheerio, chrtostr, file, filepath, files, fs, html, options, path, sections, targets, unescape, word, word_link, words, words_html, xhtml, _i, _j, _len, _len1, _ref;

fs = require('fs');

path = require('path');

cheerio = require('cheerio');

argv = require('argv');

argv.option([
  {
    name: 'wordsrc',
    short: 'w',
    type: 'string',
    description: '<dl>から単語を拾うソースhtmlファイル名',
    example: '-w reference.html'
  }, {
    name: 'dir',
    short: 'd',
    type: 'path',
    description: '適用するディレクトリ'
  }, {
    name: 'definition_selector',
    short: 's',
    type: 'string',
    description: '単語を拾う<dl>を示すCSSセレクタ',
    example: '-s "#contents dl"'
  }, {
    name: 'contents_selector',
    short: 'c',
    type: 'string',
    description: '文書でリンクを張るルート要素のCSSセレクタ',
    example: '-c "#contents"'
  }, {
    name: 'ignore_head',
    short: 'h',
    type: 'boolean',
    description: 'ヘッダ(h1,h2...)にはリンクを張らない'
  }, {
    name: 'xml',
    short: 'x',
    type: 'boolean',
    description: 'XML(XHTML)として処理する'
  }
]);

argv.info('指定ディレクトリから用語解説ページの指定された<dl>を読み、各ページの文書を用語へのリンクをはるように書き換える。');

_ref = argv.run(), targets = _ref.targets, options = _ref.options;

if (!((options.dir != null) && (options.wordsrc != null) && (options.definition_selector != null) && (options.contents_selector != null))) {
  console.log('必須: dir wordsrc definition_selector contents_selector');
  argv.help();
  process.exit();
}

xhtml = function(str) {
  return str.replace(/<script([^>]*)\/>/gi, '<script$1></script>').replace(/(\S)\/>/g, '$1 />');
};

chrtostr = function(str) {
  return str.replace(/&#x(\w+);/g, function(all, part, offset, src) {
    return String.fromCharCode(parseInt(part, 16));
  });
};

unescape = function(str) {
  return str.replace(/&amp;([A-Za-z0-9#]+?);/g, '&$1;');
};

filepath = path.join(options.dir, options.wordsrc);

words_html = fs.readFileSync(filepath, 'utf8');

$ = cheerio.load(words_html, {
  xmlMode: options.xml,
  decodeEntities: true
});

words = [];

$(options.definition_selector).children().each(function() {
  var elem, i, id, id_seq, word, _i, _ref1;
  elem = $(this);
  if (elem.is('dt')) {
    word = elem.text();
    if (!elem.attr('id')) {
      id_seq = [];
      for (i = _i = 0, _ref1 = word.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        id_seq.push('x' + word.charCodeAt(i).toString(16));
      }
      elem.attr('id', id_seq.join('-'));
    }
    id = elem.attr('id');
    return words.push({
      word: word,
      id: id
    });
  }
});

fs.writeFileSync(filepath, unescape(chrtostr(xhtml($.html()))), 'utf8');

files = fs.readdirSync(options.dir);

sections = [];

for (_i = 0, _len = files.length; _i < _len; _i++) {
  file = files[_i];
  if (file.match(/\.html$/) && file !== options.wordsrc) {
    filepath = path.join(options.dir, file);
    console.log('process: ', filepath);
    html = fs.readFileSync(filepath);
    $ = cheerio.load(html, {
      xmlMode: options.xml,
      decodeEntities: true
    });
    for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
      word = words[_j];
      word_link = function(element) {
        return element.contents().each(function() {
          var child, text;
          child = $(this);
          if (child.is(':not(a)') && (!options.ignore_head || child.is(':not(h1):not(h2):not(h3):not(h4):not(h5):not(h6)'))) {
            return word_link(child);
          } else if (!child.is('*')) {
            text = child.text();
            text = text.replace(new RegExp(word.word, 'gi'), '<a href="' + options.wordsrc + '#' + word.id + '">' + word.word + '</a>');
            return child.replaceWith(text);
          }
        });
      };
      word_link($(options.contents_selector));
    }
    fs.writeFileSync(filepath, unescape(chrtostr(xhtml($.html()))), 'utf8');
  }
}
