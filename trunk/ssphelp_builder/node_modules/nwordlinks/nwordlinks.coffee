fs = require 'fs'
path = require 'path'
cheerio = require 'cheerio'
argv = require 'argv'

argv.option [
	{
		name: 'wordsrc'
		short: 'w'
		type: 'string'
		description: '<dl>から単語を拾うソースhtmlファイル名'
		example: '-w reference.html'
	}
	{
		name: 'dir'
		short: 'd'
		type: 'path'
		description: '適用するディレクトリ'
	}
	{
		name: 'definition_selector'
		short: 's'
		type: 'string'
		description: '単語を拾う<dl>を示すCSSセレクタ'
		example: '-s "#contents dl"'
	}
	{
		name: 'contents_selector'
		short: 'c'
		type: 'string'
		description: '文書でリンクを張るルート要素のCSSセレクタ'
		example: '-c "#contents"'
	}
	{
		name: 'ignore_head'
		short: 'h'
		type: 'boolean'
		description: 'ヘッダ(h1,h2...)にはリンクを張らない'
	}
	{
		name: 'xml'
		short: 'x'
		type: 'boolean'
		description: 'XML(XHTML)として処理する'
	}
]

argv.info '''
	指定ディレクトリから用語解説ページの指定された<dl>を読み、各ページの文書を用語へのリンクをはるように書き換える。
'''

{targets, options} = argv.run()

unless options.dir? and options.wordsrc? and options.definition_selector? and options.contents_selector?
	console.log '''
		必須: dir wordsrc definition_selector contents_selector
	'''
	argv.help()
	process.exit()

xhtml = (str) -> str.replace(/<script([^>]*)\/>/gi, '<script$1></script>').replace(/(\S)\/>/g, '$1 />')
chrtostr = (str) -> str.replace /&#x(\w+);/g, (all, part, offset, src) -> String.fromCharCode parseInt(part, 16)
unescape = (str) -> str.replace /&amp;([A-Za-z0-9#]+?);/g, '&$1;'

filepath = path.join(options.dir, options.wordsrc)
words_html = fs.readFileSync filepath, 'utf8'
$ = cheerio.load words_html, xmlMode: options.xml, decodeEntities: true
words = []
$(options.definition_selector).children().each ->
	elem = $(@)
	if elem.is('dt')
		word = elem.text()
		unless elem.attr 'id'
			id_seq = []
			for i in [0 ... word.length]
				id_seq.push 'x' + word.charCodeAt(i).toString(16)
			elem.attr 'id', id_seq.join '-'
		id = elem.attr 'id'
		words.push {word: word, id: id}

fs.writeFileSync filepath, unescape(chrtostr(xhtml($.html()))), 'utf8'

files = fs.readdirSync options.dir
sections = []
for file in files
	if file.match(/\.html$/) and file != options.wordsrc
		filepath = path.join options.dir, file
		console.log 'process: ', filepath
		html = fs.readFileSync filepath
		$ = cheerio.load html, xmlMode: options.xml, decodeEntities: true
		for word in words
			word_link = (element) ->
				element.contents().each ->
					child = $(@)
					if child.is(':not(a)') and (not options.ignore_head or child.is(':not(h1):not(h2):not(h3):not(h4):not(h5):not(h6)'))
						word_link child
					else if not child.is('*')
						text = child.text()
						text = text.replace (new RegExp(word.word, 'gi')), '<a href="'+options.wordsrc+'#'+word.id+'">'+word.word+'</a>'
						child.replaceWith text
			word_link $(options.contents_selector)
		fs.writeFileSync filepath, unescape(chrtostr(xhtml($.html()))), 'utf8'
